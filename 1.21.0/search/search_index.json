{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 ClearURLs is an add-on based on the new WebExtensions technology and is optimized for Firefox and Chrome based browsers. This extension will automatically remove tracking elements from URLs to help protect your privacy when browse through the Internet, which is regularly updated by us and can be found here . Rules You can find more information about the structure of the rules file under Specifications/Rules . Hint You can learn more information about the required permissions under Permissions . Application \u00b6 Many websites use tracking elements in the URL (e.g. https://example.com?utm_source=newsletter1&utm_medium=email&utm_campaign=sale ) to mark your online activity. All that tracking code is not necessary for a website to be displayed or work correctly and can therefore be removed\u2014that is exactly what ClearURLs does. Another common example are Amazon URLs. If you search for a product on Amazon you will see a very long URL, such as: https://www.amazon.com/dp/exampleProduct/ref=sxin_0_pb?__mk_de_DE=\u00c5M\u00c5\u017d\u00d5\u00d1&keywords=tea&pd_rd_i=exampleProduct&pd_rd_r=8d39e4cd-1e4f-43db-b6e7-72e969a84aa5&pd_rd_w=1pcKM&pd_rd_wg=hYrNl&pf_rd_p=50bbfd25-5ef7-41a2-68d6-74d854b30e30&pf_rd_r=0GMWD0YYKA7XFGX55ADP&qid=1517757263&rnid=2914120011 Indeed most of the above URL is tracking code. Once ClearURLs has cleaned the address, it will look like this: https://www.amazon.com/dp/exampleProduct Features \u00b6 Removes tracking from URLs automatically in the background Blocks some common ad domains (optional) Has a built-in tool to clean up multiple URLs at once Supports redirection to the destination, without tracking services as middleman Adds an entry to the context menu so that links can be copied quickly and cleanly Blocks hyperlink auditing, also known as ping tracking (see also this article ) Prevents ETag tracking Prevents tracking injection over history API (see also: The replaceState() method ) Prevents Google from rewriting the search results (to include tracking elements) Prevents Yandex from rewriting the search results (to include tracking elements) Download \u00b6 Donation \u00b6","title":"Overview"},{"location":"#overview","text":"ClearURLs is an add-on based on the new WebExtensions technology and is optimized for Firefox and Chrome based browsers. This extension will automatically remove tracking elements from URLs to help protect your privacy when browse through the Internet, which is regularly updated by us and can be found here . Rules You can find more information about the structure of the rules file under Specifications/Rules . Hint You can learn more information about the required permissions under Permissions .","title":"Overview"},{"location":"#application","text":"Many websites use tracking elements in the URL (e.g. https://example.com?utm_source=newsletter1&utm_medium=email&utm_campaign=sale ) to mark your online activity. All that tracking code is not necessary for a website to be displayed or work correctly and can therefore be removed\u2014that is exactly what ClearURLs does. Another common example are Amazon URLs. If you search for a product on Amazon you will see a very long URL, such as: https://www.amazon.com/dp/exampleProduct/ref=sxin_0_pb?__mk_de_DE=\u00c5M\u00c5\u017d\u00d5\u00d1&keywords=tea&pd_rd_i=exampleProduct&pd_rd_r=8d39e4cd-1e4f-43db-b6e7-72e969a84aa5&pd_rd_w=1pcKM&pd_rd_wg=hYrNl&pf_rd_p=50bbfd25-5ef7-41a2-68d6-74d854b30e30&pf_rd_r=0GMWD0YYKA7XFGX55ADP&qid=1517757263&rnid=2914120011 Indeed most of the above URL is tracking code. Once ClearURLs has cleaned the address, it will look like this: https://www.amazon.com/dp/exampleProduct","title":"Application"},{"location":"#features","text":"Removes tracking from URLs automatically in the background Blocks some common ad domains (optional) Has a built-in tool to clean up multiple URLs at once Supports redirection to the destination, without tracking services as middleman Adds an entry to the context menu so that links can be copied quickly and cleanly Blocks hyperlink auditing, also known as ping tracking (see also this article ) Prevents ETag tracking Prevents tracking injection over history API (see also: The replaceState() method ) Prevents Google from rewriting the search results (to include tracking elements) Prevents Yandex from rewriting the search results (to include tracking elements)","title":"Features"},{"location":"#download","text":"","title":"Download"},{"location":"#donation","text":"","title":"Donation"},{"location":"permissions/","text":"","title":"Permissions"},{"location":"specs/rules/","text":"At the moment ClearURLs know three types of rules files. The first and the oldest one is the data.json file. The second one is the data.min.json file, and the third one is the data.minify.json . The differences are described below. Important If you want to implement one of these files into your project and always retrieve the current files from the repository, please use the GitLab/GitHub Pages URL to access the files to preserve the GitLab/GitHub infrastructure. The files are available at: GitLab data.minify.json: https://rules1.clearurls.xyz/data.minify.json rules.minify.hash: https://rules1.clearurls.xyz/rules.minify.hash GitHub data.minify.json: https://rules2.clearurls.xyz/data.minify.json rules.minify.hash: https://rules2.clearurls.xyz/rules.minify.hash data.json \u00b6 Danger The data.json format is outdated. Please use only the data.min.json format! The data.json file saves all rules, exceptions, and redirections, that are maintained by the ClearURLs developers and the community. This file is hosted at the GitLab repository of ClearURLs and is saved with an additional hash file, named rules.hash , to ensure, that the rules are not faulty after the download. Example of a data.json file { \"providers\": { \"providers name\": { \"urlPattern\": \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com\", \"completeProvider\": false, \"rules\": [ \"trackingField=[^\\\\/|\\\\?|&]*(\\\\/|&(amp;)?)?\", ], \"exceptions\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com/re.*/redirector.html/\" ], \"redirections\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com.*url\\\\?.*url=([^&]+)\" ] } } } The data.json file is a typical JSON file. It is structured in providers . Providers are companies or website names, e.g. Google or Reddit. Every provider has the parent element providers , it holds the reference to all providers. Every provider has the following five properties: urlPattern , completeProvider , rules , exceptions , and redirections . The properties of urlPattern and completeProvider must be set. The other properties are optional. urlPattern \u00b6 The urlPattern is a regular expression, that must match every URL that should be affected by the specified rules, exceptions, or redirections of the provider. The typical structure is <protocols><any subdomains><domain name><TLDs><any directories>?<any fields> . In most cases the following expression covers all the needs, you only have to substitute the remaining <> fields: ^https?://(?:[a-z0-9-]+\\\\.)*?<domain name>\\\\.<TLD> . If you want to match with every TLD, you can substitute the TLD field with (?:[a-z]{2,}){1,} . completeProvider \u00b6 The completeProvider is a boolean, that determines if every url, that matched the urlPattern will be blocked. If you want to specify rules, exceptions, and/or redirections, the value of completeProvider must be false . rules \u00b6 The rules property is a JSON-Array. Every element in this array is a regular expression, that matched a field. If ClearURLs found a field, that matched a rule, in a given URL, the field will be deleted. Only URLs that match the url Pattern will be checked for matching fields. exceptions \u00b6 The exceptions property is also a JSON-Array. Every element in this array is a regular expression, that matches a URL. If ClearURLs found a URL, that matched an exception, then no further processing on this URL is done. redirections \u00b6 The redirections property is also a JSON-Array. Every element in this array is a regular expression, that matches a URL. But the regular expression must follow a specification. The first regular expression group (https://www.regular-expressions.info/brackets.html) must be the URL that shall be redirected. If ClearURLs find a URL that matched the redirection than ClearURLs will decodeURIComponent() the first matching group and call this URL. rules.hash \u00b6 The rules.hash file saves a SHA256 hash of the data.json file. It is used to ensure, that the rules are not faulty after the download. Important Note that the hash must be in lowercase. data.min.json \u00b6 The data.min.json file mostly equals to the data.json file. Since the version 1.5a, every rule is automatically expanded by the ClearURLs core. So it is no longer necessary, to write the stuff, that is on every rule equals, into the data.min.json file. Important From the version 1.5a, every rule has the following structure: (?:&amp;|[/?#&])(?:<field name>=[^&]*) . The only differences between the rules are the field names . The field names can still be regular expressions, but they don't have to handle the \"well-formed field check\". The following fields are new in the data.min.json: rawRules , referralMarketing , and forceRedirection . rawRules \u00b6 rawRules : Because other elements in a URL that should be filtered, besides \"well-formed fields\", there is also the rawRules property. Regular expressions formulated in this property can refer to the entire URL and not just to individual fields. They are therefore applied directly to the URL. referralMarketing \u00b6 referralMarketing : Since version 1.9.0 you can allow referral marketing in ClearURLs. Previously these fields were always removed. Since some people want to support other people through referral marketing, referral marketing can be allowed in the settings. If referral marketing is allowed, the regular expressions in this array are no longer filtered. Attention Referral Marketing is disabled by default. forceRedirection \u00b6 forceRedirection : Some websites, such as Google, have manipulated URLs ( <a> tags) in such a way that the URL is no longer called normally, but via a built-in script. The result is that a simple redirect of the URL does no longer works. So that the URL can still be forwarded by ClearURLs, there is the property forceRedirection , which writes the URL into the main_frame object of the browser. Example of a data.min.json file The example for the data.json from above looks like the following as a data.min.json file: { \"providers\": { \"providers name\": { \"urlPattern\": \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com\", \"completeProvider\": false, \"rules\": [ \"trackingField\", ], \"rawRules\": [ \"/ref=[^/|?]*\" ], \"referralMarketing\": [ \"tag\" ], \"exceptions\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com/re.*/redirector.html/\" ], \"redirections\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com.*url\\\\?.*url=([^&]+)\" ], \"forceRedirection\": false } } } Important It is highly recommended to use the data.min.json file because this file will be used by all new versions of ClearURLs. rules.min.hash \u00b6 For the data.min.json file, the GitLab CI-Runner automatically generates the necessary rules.min.hash file . Note that the hash must be in lowercase. data.minify.json \u00b6 The data.minify.json file is automatically generated by the GitLab CI-Runner from the data.min.json file and also the necessary rules.minify.hash file . The data.minify.json is a minimal version of the data.min.json file where all line breaks and spaces, as well as default values and empty lists, are removed, to save bandwidth.","title":"Rules"},{"location":"specs/rules/#datajson","text":"Danger The data.json format is outdated. Please use only the data.min.json format! The data.json file saves all rules, exceptions, and redirections, that are maintained by the ClearURLs developers and the community. This file is hosted at the GitLab repository of ClearURLs and is saved with an additional hash file, named rules.hash , to ensure, that the rules are not faulty after the download. Example of a data.json file { \"providers\": { \"providers name\": { \"urlPattern\": \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com\", \"completeProvider\": false, \"rules\": [ \"trackingField=[^\\\\/|\\\\?|&]*(\\\\/|&(amp;)?)?\", ], \"exceptions\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com/re.*/redirector.html/\" ], \"redirections\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com.*url\\\\?.*url=([^&]+)\" ] } } } The data.json file is a typical JSON file. It is structured in providers . Providers are companies or website names, e.g. Google or Reddit. Every provider has the parent element providers , it holds the reference to all providers. Every provider has the following five properties: urlPattern , completeProvider , rules , exceptions , and redirections . The properties of urlPattern and completeProvider must be set. The other properties are optional.","title":"data.json"},{"location":"specs/rules/#urlpattern","text":"The urlPattern is a regular expression, that must match every URL that should be affected by the specified rules, exceptions, or redirections of the provider. The typical structure is <protocols><any subdomains><domain name><TLDs><any directories>?<any fields> . In most cases the following expression covers all the needs, you only have to substitute the remaining <> fields: ^https?://(?:[a-z0-9-]+\\\\.)*?<domain name>\\\\.<TLD> . If you want to match with every TLD, you can substitute the TLD field with (?:[a-z]{2,}){1,} .","title":"urlPattern"},{"location":"specs/rules/#completeprovider","text":"The completeProvider is a boolean, that determines if every url, that matched the urlPattern will be blocked. If you want to specify rules, exceptions, and/or redirections, the value of completeProvider must be false .","title":"completeProvider"},{"location":"specs/rules/#rules","text":"The rules property is a JSON-Array. Every element in this array is a regular expression, that matched a field. If ClearURLs found a field, that matched a rule, in a given URL, the field will be deleted. Only URLs that match the url Pattern will be checked for matching fields.","title":"rules"},{"location":"specs/rules/#exceptions","text":"The exceptions property is also a JSON-Array. Every element in this array is a regular expression, that matches a URL. If ClearURLs found a URL, that matched an exception, then no further processing on this URL is done.","title":"exceptions"},{"location":"specs/rules/#redirections","text":"The redirections property is also a JSON-Array. Every element in this array is a regular expression, that matches a URL. But the regular expression must follow a specification. The first regular expression group (https://www.regular-expressions.info/brackets.html) must be the URL that shall be redirected. If ClearURLs find a URL that matched the redirection than ClearURLs will decodeURIComponent() the first matching group and call this URL.","title":"redirections"},{"location":"specs/rules/#ruleshash","text":"The rules.hash file saves a SHA256 hash of the data.json file. It is used to ensure, that the rules are not faulty after the download. Important Note that the hash must be in lowercase.","title":"rules.hash"},{"location":"specs/rules/#dataminjson","text":"The data.min.json file mostly equals to the data.json file. Since the version 1.5a, every rule is automatically expanded by the ClearURLs core. So it is no longer necessary, to write the stuff, that is on every rule equals, into the data.min.json file. Important From the version 1.5a, every rule has the following structure: (?:&amp;|[/?#&])(?:<field name>=[^&]*) . The only differences between the rules are the field names . The field names can still be regular expressions, but they don't have to handle the \"well-formed field check\". The following fields are new in the data.min.json: rawRules , referralMarketing , and forceRedirection .","title":"data.min.json"},{"location":"specs/rules/#rawrules","text":"rawRules : Because other elements in a URL that should be filtered, besides \"well-formed fields\", there is also the rawRules property. Regular expressions formulated in this property can refer to the entire URL and not just to individual fields. They are therefore applied directly to the URL.","title":"rawRules"},{"location":"specs/rules/#referralmarketing","text":"referralMarketing : Since version 1.9.0 you can allow referral marketing in ClearURLs. Previously these fields were always removed. Since some people want to support other people through referral marketing, referral marketing can be allowed in the settings. If referral marketing is allowed, the regular expressions in this array are no longer filtered. Attention Referral Marketing is disabled by default.","title":"referralMarketing"},{"location":"specs/rules/#forceredirection","text":"forceRedirection : Some websites, such as Google, have manipulated URLs ( <a> tags) in such a way that the URL is no longer called normally, but via a built-in script. The result is that a simple redirect of the URL does no longer works. So that the URL can still be forwarded by ClearURLs, there is the property forceRedirection , which writes the URL into the main_frame object of the browser. Example of a data.min.json file The example for the data.json from above looks like the following as a data.min.json file: { \"providers\": { \"providers name\": { \"urlPattern\": \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com\", \"completeProvider\": false, \"rules\": [ \"trackingField\", ], \"rawRules\": [ \"/ref=[^/|?]*\" ], \"referralMarketing\": [ \"tag\" ], \"exceptions\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com/re.*/redirector.html/\" ], \"redirections\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com.*url\\\\?.*url=([^&]+)\" ], \"forceRedirection\": false } } } Important It is highly recommended to use the data.min.json file because this file will be used by all new versions of ClearURLs.","title":"forceRedirection"},{"location":"specs/rules/#rulesminhash","text":"For the data.min.json file, the GitLab CI-Runner automatically generates the necessary rules.min.hash file . Note that the hash must be in lowercase.","title":"rules.min.hash"},{"location":"specs/rules/#dataminifyjson","text":"The data.minify.json file is automatically generated by the GitLab CI-Runner from the data.min.json file and also the necessary rules.minify.hash file . The data.minify.json is a minimal version of the data.min.json file where all line breaks and spaces, as well as default values and empty lists, are removed, to save bandwidth.","title":"data.minify.json"}]}