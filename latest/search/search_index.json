{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 ClearURLs is an add-on based on the new WebExtensions technology and is optimized for Firefox and Chrome based browsers. This extension will automatically remove tracking elements from URLs to help protect your privacy when browsing through the internet. For this purpose, we use a large catalog of rules, which is actively maintained by us and the community. See also You can find more information about the structure of the rules catalog under Specifications/Rule Catalogs . Hint You can learn more information about the required permissions under Permissions . Application \u00b6 https://example.com? utm_source =newsletter1& utm_medium =email& utm_campaign =sale Many websites use tracking elements in the URL to mark your online activity. All that tracking code is not necessary for a website to be displayed or work correctly and can therefore be removed \u2014 that is exactly what ClearURLs does. Another common example are Amazon URLs. If you search for a product on Amazon you will see a very long URL, such as: https://www.amazon.com/dp/exampleProduct/ ref =sxin_0_pb? __mk_de_DE =\u00c5M\u00c5\u017d\u00d5\u00d1& keywords =tea& pd_rd_i =exampleProduct& pd_rd_r =8d39e4cd-1e4f-43db-b6e7-72e969a84aa5& pd_rd_w =1pcKM& pd_rd_wg =hYrNl& pf_rd_p =50bbfd25-5ef7-41a2-68d6-74d854b30e30& pf_rd_r =0GMWD0YYKA7XFGX55ADP& qid =1517757263& rnid =2914120011 Indeed most of the above URL is tracking code. Once ClearURLs has cleaned the address, it will look like this: https://www.amazon.com/dp/exampleProduct Features \u00b6 Removes tracking from URLs automatically in the background Blocks some common ad domains (optional) Has a built-in tool to clean up multiple URLs at once Supports redirection to the destination, without tracking services as a middleman Adds an entry to the context menu so that links can be copied quickly and cleanly Blocks hyperlink auditing, also known as ping tracking (see also this article ) Prevents ETag tracking Prevents tracking injection over history API (see also: the replaceState() method ) Prevents Google from rewriting the search results (prevents the insertion of tracking code) Prevents Yandex from rewriting the search results (prevents the insertion of tracking code) Download \u00b6 Donation \u00b6","title":"Overview"},{"location":"#overview","text":"ClearURLs is an add-on based on the new WebExtensions technology and is optimized for Firefox and Chrome based browsers. This extension will automatically remove tracking elements from URLs to help protect your privacy when browsing through the internet. For this purpose, we use a large catalog of rules, which is actively maintained by us and the community. See also You can find more information about the structure of the rules catalog under Specifications/Rule Catalogs . Hint You can learn more information about the required permissions under Permissions .","title":"Overview"},{"location":"#application","text":"https://example.com? utm_source =newsletter1& utm_medium =email& utm_campaign =sale Many websites use tracking elements in the URL to mark your online activity. All that tracking code is not necessary for a website to be displayed or work correctly and can therefore be removed \u2014 that is exactly what ClearURLs does. Another common example are Amazon URLs. If you search for a product on Amazon you will see a very long URL, such as: https://www.amazon.com/dp/exampleProduct/ ref =sxin_0_pb? __mk_de_DE =\u00c5M\u00c5\u017d\u00d5\u00d1& keywords =tea& pd_rd_i =exampleProduct& pd_rd_r =8d39e4cd-1e4f-43db-b6e7-72e969a84aa5& pd_rd_w =1pcKM& pd_rd_wg =hYrNl& pf_rd_p =50bbfd25-5ef7-41a2-68d6-74d854b30e30& pf_rd_r =0GMWD0YYKA7XFGX55ADP& qid =1517757263& rnid =2914120011 Indeed most of the above URL is tracking code. Once ClearURLs has cleaned the address, it will look like this: https://www.amazon.com/dp/exampleProduct","title":"Application"},{"location":"#features","text":"Removes tracking from URLs automatically in the background Blocks some common ad domains (optional) Has a built-in tool to clean up multiple URLs at once Supports redirection to the destination, without tracking services as a middleman Adds an entry to the context menu so that links can be copied quickly and cleanly Blocks hyperlink auditing, also known as ping tracking (see also this article ) Prevents ETag tracking Prevents tracking injection over history API (see also: the replaceState() method ) Prevents Google from rewriting the search results (prevents the insertion of tracking code) Prevents Yandex from rewriting the search results (prevents the insertion of tracking code)","title":"Features"},{"location":"#download","text":"","title":"Download"},{"location":"#donation","text":"","title":"Donation"},{"location":"permissions/","text":"","title":"Permissions"},{"location":"specs/rules/","text":"At the moment ClearURLs knows three types of rule catalogs \u2013 each in its respective file. We will only look at two of these three catalogs, as the first version is already outdated. Important If you want to use one of these catalogs in your project and always retrieve the current version, please use the GitLab/GitHub Pages URL to access the catalogs to preserve the GitLab/GitHub infrastructure. The catalog files are available at: GitHub (default) data.minify.json: https:// rules2 .clearurls.xyz/data.minify.json rules.minify.hash: https:// rules2 .clearurls.xyz/rules.minify.hash GitLab data.minify.json: https:// rules1 .clearurls.xyz/data.minify.json rules.minify.hash: https:// rules1 .clearurls.xyz/rules.minify.hash Important Do not use the older data.json catalog \u2013 it is outdated and will no longer receive any updates. Instead, use the data.min.json catalog! data.min.json Catalog \u00b6 The data.min.json catalog is a typical JSON file and saves all rules, exceptions, and redirections, that are maintained by the ClearURLs developers and the community. It is structured in providers . Providers are a logical unit under which multiple rules are applied under the same urlPattern . Examples of providers are companies or services like Google or Reddit. Every provider has the parent element providers , it holds the reference to all providers. Every provider has the following properties: urlPattern (required) completeProvider (required) rules (optional) rawRules (optional) referralMarketing (optional) exceptions (optional) redirections (optional) forceRedirection (optional) Example of a data.min.json file { \"providers\": { \"provider name\": { \"urlPattern\": \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com\", \"completeProvider\": false, \"rules\": [ \"trackingField\", ], \"rawRules\": [ \"/ref=[^/|?]*\" ], \"referralMarketing\": [ \"tag\" ], \"exceptions\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com/re.*/redirector.html/\" ], \"redirections\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com.*url\\\\?.*url=([^&]+)\" ], \"forceRedirection\": false } } } urlPattern \u00b6 The urlPattern is a regular expression, that must match every URL that should be affected by the specified rules, exceptions, or redirections of the provider. The typical structure is <protocol><subdomain><domain name><TLD><directorie>?<fields> . In most cases the following expression covers all the needs, you only have to substitute the remaining <> fields: ^https?://(?:[a-z0-9-]+\\\\.)*?<domain name>\\\\.<TLD> . If you want to match with every TLD, you can substitute the TLD field with (?:[a-z]{2,}){1,} . completeProvider \u00b6 The completeProvider is a boolean, that determines if every URL that matches the urlPattern will be blocked. If you want to specify rules, exceptions, and/or redirections, the value of completeProvider must be false . rules \u00b6 The rules property is a JSON array. Every element in this array will be automatically rewritten to (?:&amp;|[/?#&])(?: <field name> =[^&]*) to match the field name . The field name can still be a regular expression, but don't have to. If ClearURLs found a field that matches a rule in a given URL the field will be deleted. Only URLs that match the url Pattern will be checked for matching fields. rawRules \u00b6 Because other elements in a URL that should be filtered, besides \"well-formed fields\" aka normal rules, there is also the rawRules property. Regular expressions formulated in this property can refer to the entire URL and not just to individual fields. They are therefore applied directly to the URL. referralMarketing \u00b6 Since version 1.9.0, you can allow referral marketing in ClearURLs. Previously these fields were always removed. Since some people want to support other people through referral marketing, referral marketing can be allowed in the settings. If referral marketing is allowed, the regular expressions in this array are no longer filtered. Attention Referral Marketing is disabled by default. exceptions \u00b6 The exceptions property is also a JSON array. Every element in this array is a regular expression, that matches a URL. If ClearURLs found a URL, that matches an exception, no further processing on this URL is done. redirections \u00b6 The redirections property is a JSON array. Every element in this array is a regular expression, that matches a URL and must follow a specification. The first regular expression group must be the URL that should be redirected. If ClearURLs find a URL that matches the redirection, the first matching group will be decoded with will decodeURIComponent() and replaces the old URL. forceRedirection \u00b6 Some websites, such as Google, have manipulated URLs ( <a> tags) in such a way that the URL is no longer called normally, rather via a built-in script. The result is that a simple redirect of the URL does no longer work. Thus, to still forward the URL by ClearURLs, there is the property forceRedirection which writes the URL into the main_frame object of the browser. rules.min.hash \u00b6 The rules.min.hash file saves a SHA256 hash of the data.min.json file and will be automatically generated by the GitLab CI runner. It is used to ensure, that the rules are not faulty after the download. Important Note that the hash must be in lowercase. data.minify.json Catalog \u00b6 The data.minify.json file is automatically generated by the GitLab CI runner from the data.min.json file and also the corresponding rules.minify.hash file . The data.minify.json is a minimal version of the data.min.json file where all line breaks and spaces, as well as default values and empty lists, are removed to save bandwidth.","title":"Rule Catalogs"},{"location":"specs/rules/#dataminjson-catalog","text":"The data.min.json catalog is a typical JSON file and saves all rules, exceptions, and redirections, that are maintained by the ClearURLs developers and the community. It is structured in providers . Providers are a logical unit under which multiple rules are applied under the same urlPattern . Examples of providers are companies or services like Google or Reddit. Every provider has the parent element providers , it holds the reference to all providers. Every provider has the following properties: urlPattern (required) completeProvider (required) rules (optional) rawRules (optional) referralMarketing (optional) exceptions (optional) redirections (optional) forceRedirection (optional) Example of a data.min.json file { \"providers\": { \"provider name\": { \"urlPattern\": \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com\", \"completeProvider\": false, \"rules\": [ \"trackingField\", ], \"rawRules\": [ \"/ref=[^/|?]*\" ], \"referralMarketing\": [ \"tag\" ], \"exceptions\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com/re.*/redirector.html/\" ], \"redirections\": [ \"^https?://(?:[a-z0-9-]+\\\\.)*?domainName\\\\.com.*url\\\\?.*url=([^&]+)\" ], \"forceRedirection\": false } } }","title":"data.min.json Catalog"},{"location":"specs/rules/#urlpattern","text":"The urlPattern is a regular expression, that must match every URL that should be affected by the specified rules, exceptions, or redirections of the provider. The typical structure is <protocol><subdomain><domain name><TLD><directorie>?<fields> . In most cases the following expression covers all the needs, you only have to substitute the remaining <> fields: ^https?://(?:[a-z0-9-]+\\\\.)*?<domain name>\\\\.<TLD> . If you want to match with every TLD, you can substitute the TLD field with (?:[a-z]{2,}){1,} .","title":"urlPattern"},{"location":"specs/rules/#completeprovider","text":"The completeProvider is a boolean, that determines if every URL that matches the urlPattern will be blocked. If you want to specify rules, exceptions, and/or redirections, the value of completeProvider must be false .","title":"completeProvider"},{"location":"specs/rules/#rules","text":"The rules property is a JSON array. Every element in this array will be automatically rewritten to (?:&amp;|[/?#&])(?: <field name> =[^&]*) to match the field name . The field name can still be a regular expression, but don't have to. If ClearURLs found a field that matches a rule in a given URL the field will be deleted. Only URLs that match the url Pattern will be checked for matching fields.","title":"rules"},{"location":"specs/rules/#rawrules","text":"Because other elements in a URL that should be filtered, besides \"well-formed fields\" aka normal rules, there is also the rawRules property. Regular expressions formulated in this property can refer to the entire URL and not just to individual fields. They are therefore applied directly to the URL.","title":"rawRules"},{"location":"specs/rules/#referralmarketing","text":"Since version 1.9.0, you can allow referral marketing in ClearURLs. Previously these fields were always removed. Since some people want to support other people through referral marketing, referral marketing can be allowed in the settings. If referral marketing is allowed, the regular expressions in this array are no longer filtered. Attention Referral Marketing is disabled by default.","title":"referralMarketing"},{"location":"specs/rules/#exceptions","text":"The exceptions property is also a JSON array. Every element in this array is a regular expression, that matches a URL. If ClearURLs found a URL, that matches an exception, no further processing on this URL is done.","title":"exceptions"},{"location":"specs/rules/#redirections","text":"The redirections property is a JSON array. Every element in this array is a regular expression, that matches a URL and must follow a specification. The first regular expression group must be the URL that should be redirected. If ClearURLs find a URL that matches the redirection, the first matching group will be decoded with will decodeURIComponent() and replaces the old URL.","title":"redirections"},{"location":"specs/rules/#forceredirection","text":"Some websites, such as Google, have manipulated URLs ( <a> tags) in such a way that the URL is no longer called normally, rather via a built-in script. The result is that a simple redirect of the URL does no longer work. Thus, to still forward the URL by ClearURLs, there is the property forceRedirection which writes the URL into the main_frame object of the browser.","title":"forceRedirection"},{"location":"specs/rules/#rulesminhash","text":"The rules.min.hash file saves a SHA256 hash of the data.min.json file and will be automatically generated by the GitLab CI runner. It is used to ensure, that the rules are not faulty after the download. Important Note that the hash must be in lowercase.","title":"rules.min.hash"},{"location":"specs/rules/#dataminifyjson-catalog","text":"The data.minify.json file is automatically generated by the GitLab CI runner from the data.min.json file and also the corresponding rules.minify.hash file . The data.minify.json is a minimal version of the data.min.json file where all line breaks and spaces, as well as default values and empty lists, are removed to save bandwidth.","title":"data.minify.json Catalog"}]}